<?php
/**
 * Created by IntelliJ IDEA.
 * User: vjcspy
 * Date: 6/11/16
 * Time: 3:14 PM
 */

namespace Modules\IzShop\Http\Controllers\Products;


use Illuminate\Http\Request;
use Modules\IzShop\Http\Controllers\DataTable\DataTableWithMagentoApiAbstractController;
use GuzzleHttp\Client;
use Carbon\Carbon;

class ProductController extends DataTableWithMagentoApiAbstractController {

    protected $_imageFolder;
    /**
     * @var \Intervention\Image\ImageManager
     */
    protected $Image;


    public function postUpload(Request $request) {
        $this->Image = app()['image'];

        //get file:
        $file       = $request->file('file');
        $image_name = $file->getClientOriginalName();

        if (is_null($this->_imageFolder)) {
            $file->move('uploads', $image_name);
            $this->Image->make(sprintf('uploads/%s', $image_name))->save();
        }
        else {
            //move file to folder
            $file->move('uploads/' . $this->_imageFolder, $image_name);
            // save image by Image
            $this->Image->make(sprintf('uploads/' . $this->_imageFolder . '/%s', $image_name))->save();
        }

        /*Call api magento to save image*/
        try {
            $imagePath = public_path() . '/uploads/' . $image_name;
            $this->setResponseData(
                [
                    'success'          => true,
                    'files'            => $_FILES,
                    'get'              => $_GET,
                    'post'             => $_POST,
                    'pathFile'         => $imagePath,
                    //optional
                    'flowTotalSize'    => isset($_FILES['file']) ? $_FILES['file']['size'] : $_GET['flowTotalSize'],
                    'flowIdentifier'   => isset($_FILES['file']) ? $_FILES['file']['name'] . '-' . $_FILES['file']['size']
                        : $_GET['flowIdentifier'],
                    'flowFilename'     => isset($_FILES['file']) ? $_FILES['file']['name'] : $_GET['flowFilename'],
                    'flowRelativePath' => isset($_FILES['file']) ? $_FILES['file']['tmp_name'] : $_GET['flowRelativePath']
                ]);
        }
        catch (\Exception $e) {
            $this->setErrorData($e->getMessage());
        }

        return $this->responseJson();

    }

    public function getUpload() {
        $this->setResponseCode(204);

        return $this->responseJson();
    }

    public function postSaveProductImage(Request $request) {
        $param = $this->getRequestData($request);
        try {
            $client = $this->magentoSearchApi->getClient();
            $r      = $client->request(
                'POST',
                $this->getApiUrl('magento_save_product_image'),
                [
                    'form_params' => [
                        'image_path' => $param['image_path'],
                        'product_id' => $param['product_id']
                    ],
                    'headers'     => [
                        'Black-Hole' => 'demo'
                    ]
                ]);
            $this->setResponseData(json_decode($r->getBody()->getContents(), true)['items'][0]);
        }
        catch (\Exception $e) {
            $this->setErrorData($e->getMessage());
        }

        return $this->responseJson();
    }

    public function getIndex(Request $request) {
        $this->magentoSearchApi->setApiUrl($this->getApiUrl('magento_search_product'));

        return parent::getIndex($request); // TODO: Change the autogenerated stub
    }

    public function getProductById(Request $request) {
        try {
            $params = $request->all();
            if (!isset($params['product_id']) || !$params['product_id'])
                throw new \Exception('Must have param product_id');

            $this->magentoSearchApi->setApiUrl($this->getApiUrl('magento_product_detail'));

            $response = $this->magentoSearchApi
                ->addSearchCriteria('product_id', $params['product_id'])
                ->setForceMode(1)
                ->authenticate()
                ->resolve();

            $product = $response->getItems();

            /*Check date-time*/
            $product = $this->checkDateTimeProductData($product);

            $this->setResponseData($product);

        }
        catch (\Exception $e) {
            $this->setErrorData($e->getMessage());
        }

        return $this->responseJson();
    }

    public function getTaxClass() {
        try {
            $this->magentoSearchApi->setApiUrl($this->getApiUrl('magento_xtax-class'));
            $response = $this
                ->magentoSearchApi
                ->setCurrentPage(1)
                ->setPageSize(100)
                ->authenticate()
                ->resolve();
            $this->setResponseData($response->getItems());
        }
        catch (\Exception $e) {
            $this->setErrorData($e->getMessage());
        }

        return $this->responseJson();
    }

    public function getProductAttrSet() {
        $this->magentoSearchApi->setApiUrl($this->getApiUrl('magento_product_attr_set'));
        $items = $this->magentoSearchApi
            ->addSearchCriteria('nothing', 'here')
            ->authenticate()
            ->resolve()
            ->getItems();

        return $this->outputJson($items);
    }

    public function getUploadImage() {
        $client       = new Client();
        $imageContent = fopen('images/a0.jpg', 'r');
        $response     = $client->request(
            'POST',
            "http://mage1.dev/index.php/admin/catalog_product_gallery/upload",
            [
                'multipart' => [
                    [
                        'name'     => 'other_file',
                        'contents' => $imageContent,
                        'filename' => 'filename.txt',
                        'headers'  => [
                            'X-Foo' => 'this is an extra header to include'
                        ]
                    ]
                ]
            ]);

        var_dump($response->getBody());
    }

    public function getCountryOfManufacture() {
        try {
            $this->magentoSearchApi->setApiUrl($this->getApiUrl('magento_country_of_manufacture'));
            $response = $this->magentoSearchApi
                ->setForceMode(1)
                ->authenticate()
                ->resolve();

            $this->setResponseData($response->getItems());
        }
        catch (\Exception $e) {
            $this->setErrorData($e->getMessage());
        }

        return $this->responseJson();
    }

    public function postSaveProduct(Request $request) {
        $data = $this->getRequestData($request);
        if (isset($data['categories']) && is_array($data['categories']) && count($data['categories']) > 0) {
            $data['category_ids'] = '';
            foreach ($data['categories'] as $category) {
                $data['category_ids'] .= "," . $category;
            }
        }
        try {
            $client = $this->magentoSearchApi->getClient();
            $r      = $client->request(
                'POST',
                $this->getApiUrl('magento_save_product'),
                [
                    'form_params' => $data,
                    'headers'     => [
                        'Black-Hole' => 'demo'
                    ]
                ]);
            $this->setResponseData($r->getBody());
        }
        catch (\Exception $e) {
            $this->setErrorData($e->getMessage());
        }

        return $this->responseJson();
    }

    private function checkDateTimeProductData($product) {
        $product = $product[0];
        if ($product['news_from_date'] != '') {
            $dt                        = Carbon::parse($product['news_from_date']);
            $product['news_from_date'] = $dt->format('m/d/Y');
        }
        if ($product['news_to_date'] != '') {
            $dt                      = Carbon::parse($product['news_to_date']);
            $product['news_to_date'] = $dt->format('m/d/Y');
        }
        if ($product['special_from_date'] != '') {
            $dt                           = Carbon::parse($product['special_from_date']);
            $product['special_from_date'] = $dt->format('m/d/Y');
        }
        if ($product['special_to_date'] != '') {
            $dt                         = Carbon::parse($product['special_to_date']);
            $product['special_to_date'] = $dt->format('m/d/Y');
        }

        return $product;
    }
}